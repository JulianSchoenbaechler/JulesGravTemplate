{"version":3,"sources":["pattern.js"],"names":["PATTERN","gridX","gridY","overdraw","variance","GRADIENT","Color","BACKGROUND","REFERENCE_SIZE","Size","centroid","c","arguments","length","undefined","options","b","args","stepX","view","size","width","stepY","height","y","x","push","Math","random","points","triangles","Delaunay","triangulate","Array","i","p1","p2","p3","triangle","Path","strokeWidth","strokeCap","strokeColor","fillColor","closed","shapes","t","sign","alpha","alphaMulti","step","Shape","Rectangle","point","pointerHasMoved","generatePoints","_objectSpread","drawTriangles","event","project","activeLayer","removeChildren","background","sizeDiff","ceil","sizeAverage","onMouseMove","currentShape","a","color1","center","segments","distance","getDistance","Point","min","onFrame","v","delta","dt","max"],"mappings":"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","file":"pattern.min.js","sourcesContent":["/**\n * SVG pattern\n * @copyright   2019 by Julian Schoenbaechler. All rights reserved.\n * @version     1.0.2\n * @author      Julian Schoenbaechler\n * @requires    /js/svg.min.js\n */\n\n/*! pattern.js v1.0.2 | MIT License | Page template julian-s.ch */\n\n/**\n * Paperscript definitions\n */\n\n/* eslint-disable */\n\n/* global paper */\n\n/* global project */\n/* global projects */\n/* global view */\n/* global tool */\n/* global tools */\n\n/* global onFrame */\n/* global onResize */\n\n\n/* global onMouseDown */\n/* global onMouseDrag */\n/* global onMouseMove */\n/* global onMouseUp */\n\n/* global onKeyDown */\n/* global onKeyUp */\n\n/* eslint-enable */\n\n(function pattern() {\n  /**\n   * General pattern options.\n   * @constant {object}\n   */\n  /* eslint-disable no-undef */\n  const PATTERN = {\n    gridX: 10,\n    gridY: 6,\n    overdraw: 60,\n    variance: 60,\n  };\n\n  /**\n   * Gradient animation colors.\n   * @constant {array}\n   */\n  const GRADIENT = [\n    new Color('#eeeeee'),\n    new Color('#cccccc'),\n  ];\n\n  /**\n   * Radius around the mouse curser that affect the triangle alpha value.\n   * @constant {number}\n   */\n  const MOUSE_RADIUS = 260;\n\n  /**\n   * The background color value.\n   * @constant {Color}\n   */\n  const BACKGROUND = new Color('#181818');\n\n  /**\n   * The reference size for the PaperJS canvas.\n   * @constant {Size}\n   */\n  const REFERENCE_SIZE = new Size(1920, 1080);\n\n  /* eslint-enable no-undef */\n\n  /**\n   * Linearly interpolates between two given colors.\n   * @param color1 {Color} - The first color.\n   * @param color2 {Color} - The second color.\n   * @param t {number} - The interpolation factor [0...1].\n   * @returns {Color} The resulting color.\n   */\n  function colorLerp(color1, color2, t) {\n    return color1 + (color2 - color1) * Math.min(Math.max(t, 0), 1);\n  }\n\n  /**\n   * Calculates the centroid of a triangle\n   * @param a {array} - The first point of the triangle [x, y].\n   * @param b {array} - The second point of the triangle [x, y].\n   * @param c {array} - The third point of the triangle [x, y].\n   * @returns {array} The point of the centroid.\n   */\n  function centroid(a, b, c) {\n    return [\n      (a[0] + b[0] + c[0]) / 3,\n      (a[1] + b[1] + c[1]) / 3,\n    ];\n  }\n\n  /**\n   * Generates the triangle points on the canvas.\n   * @param args {object} - Generation options.\n   * @returns {array} The generated points on the canvas.\n   */\n  function generatePoints(args = {}) {\n    const options = Object.assign({\n      gridX: 12,\n      gridY: 6,\n      overdraw: 32,\n      variance: 32,\n    }, args);\n\n    const stepX = (view.size.width + options.overdraw * 2) / options.gridX;\n    const stepY = (view.size.height + options.overdraw * 2) / options.gridY;\n\n    const points = [];\n\n    for (let y = 0; y <= options.gridY; y += 1) {\n      for (let x = 0; x <= options.gridX; x += 1) {\n        points.push([\n          (\n            (stepX * x)\n            - options.overdraw\n            + (Math.random() * options.variance * (Math.random() >= 0.5 ? 1 : -1))\n          ),\n          (\n            (stepY * y)\n            - options.overdraw\n            + (Math.random() * options.variance * (Math.random() >= 0.5 ? 1 : -1))\n          ),\n        ]);\n      }\n    }\n\n    return points;\n  }\n\n  /**\n   * Triangulates from points and draws the triangles on the canvas.\n   * Uses the Delaunay triangulate algorithm.\n   * @param points {array} - All the points on the canvas (must be a multiple of 3).\n   * @returns {array} The generated triangles on the canvas as 'Path' objects.\n   */\n  function drawTriangles(points) {\n    if (!points.length) { return []; }\n\n    // eslint-disable-next-line no-undef\n    const triangles = Delaunay.triangulate(points);\n    const shapes = Array(triangles.length / 3);\n\n    for (let i = 0; i < triangles.length; i += 3) {\n      const p1 = points[triangles[i]];\n      const p2 = points[triangles[i + 1]];\n      const p3 = points[triangles[i + 2]];\n\n      /* eslint-disable no-undef */\n      const triangle = new Path([\n        new Point(p1[0], p1[1]),\n        new Point(p2[0], p2[1]),\n        new Point(p3[0], p3[1]),\n      ]);\n      triangle.strokeWidth = 2;\n      triangle.strokeCap = 'round';\n      triangle.strokeJoin = 'round';\n      [triangle.strokeColor] = GRADIENT;\n      [triangle.fillColor] = GRADIENT;\n      triangle.closed = true;\n\n      shapes[i / 3] = {\n        triangle,\n        t: Math.random(),\n        step: Math.random() * 0.04 + 0.01,\n        sign: Math.random() <= 0.5,\n        alpha: 1,\n        alphaMulti: 1,\n      };\n    }\n\n    return shapes;\n  }\n\n  // Create background\n  // eslint-disable-next-line no-unused-vars\n  let background = new Shape.Rectangle({\n    point: [0, 0],\n    size: [view.size.width, view.size.height],\n    fillColor: BACKGROUND,\n  });\n\n  // Indicating if the mouse pointer has been moved\n  let pointerHasMoved = false;\n\n  // General options for the pattern generation\n  const options = { ...PATTERN };\n\n  // eslint-disable-next-line no-unused-vars\n  let points = generatePoints(options);\n  // eslint-disable-next-line no-unused-vars\n  let shapes = drawTriangles(points);\n\n  /**\n   * Gets called when the PaperJS view resizes.\n   */\n  // eslint-disable-next-line no-unused-vars\n  view.onResize = (event) => {\n    const sizeDiff = view.size / REFERENCE_SIZE;\n    const sizeAverage = (sizeDiff.width + sizeDiff.height) / 2;\n\n    options.gridX = Math.ceil(sizeDiff.width * PATTERN.gridX);\n    options.gridY = Math.ceil(sizeDiff.height * PATTERN.gridY);\n    options.variance = Math.ceil(PATTERN.variance / sizeAverage);\n    options.overdraw = Math.ceil(PATTERN.overdraw / sizeAverage);\n\n    project.activeLayer.removeChildren();\n    background = new Shape.Rectangle({\n      point: [0, 0],\n      size: [view.size.width, view.size.height],\n      fillColor: BACKGROUND,\n    });\n    points = generatePoints(options);\n    shapes = drawTriangles(points);\n  };\n\n  /**\n   * Gets called when the mouse pointer moves on the view.\n   */\n  view.onMouseMove = (event) => {\n    let currentShape;\n\n    for (let i = 0; i < shapes.length; i += 1) {\n      currentShape = shapes[i];\n\n      const center = centroid(\n        [currentShape.triangle.segments[0].point.x, currentShape.triangle.segments[0].point.y],\n        [currentShape.triangle.segments[1].point.x, currentShape.triangle.segments[1].point.y],\n        [currentShape.triangle.segments[2].point.x, currentShape.triangle.segments[2].point.y],\n      );\n      const distance = event.point.getDistance(new Point(center));\n\n      currentShape.alpha = Math.min(distance / MOUSE_RADIUS, 1);\n      /* currentShape.alpha = Math.max(\n        currentShape.alpha - (0.1 + (0.9 * (1 - (currentShape.alpha ** 2)))),\n        Math.min(distance / MOUSE_RADIUS, 1),\n      ); */\n    }\n\n    pointerHasMoved = true;\n  };\n\n  /**\n   * Gets called for every animation frame of PaperJS.\n   */\n  view.onFrame = (event) => {\n    const dt = event.delta;\n    let currentShape;\n    let v;\n\n    for (let i = 0; i < shapes.length; i += 1) {\n      currentShape = shapes[i];\n      v = currentShape.t;\n\n      // Color lerp animation\n      if (currentShape.sign) {\n        v += dt * currentShape.step;\n\n        if (v >= 1) {\n          v = 1 - (v - 1);\n          currentShape.t = 1;\n          currentShape.sign = false;\n        } else {\n          currentShape.t = v;\n        }\n      } else {\n        v -= dt * currentShape.step;\n\n        if (v <= 0) {\n          v = -v;\n          currentShape.t = 0;\n          currentShape.sign = true;\n        } else {\n          currentShape.t = v;\n        }\n      }\n\n\n      if (pointerHasMoved) {\n        currentShape.alphaMulti = Math.max(currentShape.alphaMulti - dt * 0.5, 0);\n      } else {\n        currentShape.alphaMulti = Math.min(currentShape.alphaMulti + dt * 0.5, 1);\n      }\n\n      // Assign newly generated properties\n      currentShape.triangle.fillColor = colorLerp(GRADIENT[0], GRADIENT[1], v);\n      currentShape.triangle.fillColor.alpha = currentShape.alpha\n        + (1 - currentShape.alpha) * currentShape.alphaMulti;\n    }\n\n    pointerHasMoved = false;\n  };\n}());\n"]}