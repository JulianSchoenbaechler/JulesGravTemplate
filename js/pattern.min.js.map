{"version":3,"sources":["pattern.js"],"names":["PATTERN","gridX","gridY","overdraw","variance","GRADIENT","Color","BACKGROUND","REFERENCE_SIZE","Size","generatePoints","args","arguments","length","undefined","options","Object","assign","centroid","a","stepX","view","size","width","stepY","height","points","y","x","push","Math","random","drawTriangles","triangles","Delaunay","triangulate","shapes","Array","p2","i","p3","triangle","Point","p1","Path","strokeCap","strokeJoin","strokeColor","fillColor","closed","t","step","sign","alpha","alphaMulti","pointerHasMoved","_objectSpread","event","sizeAverage","background","Shape","Rectangle","point","ceil","sizeDiff","activeLayer","onMouseMove","currentShape","b","c","center","segments","colorLerp","color1","color2","distance","getDistance","min","v","dt","delta","max"],"mappings":"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","file":"pattern.min.js","sourcesContent":["/**\n * SVG pattern\n * @copyright   2019 by Julian Schoenbaechler. All rights reserved.\n * @version     1.0.2\n * @author      Julian Schoenbaechler\n * @requires    /js/svg.min.js\n */\n\n/*! pattern.js v1.0.2 | MIT License | Page template julian-s.ch */\n\n/**\n * Paperscript definitions\n */\n\n/* eslint-disable */\n\n/* global paper */\n\n/* global project */\n/* global projects */\n/* global view */\n/* global tool */\n/* global tools */\n\n/* global onFrame */\n/* global onResize */\n\n\n/* global onMouseDown */\n/* global onMouseDrag */\n/* global onMouseMove */\n/* global onMouseUp */\n\n/* global onKeyDown */\n/* global onKeyUp */\n\n/* eslint-enable */\n\n(function pattern() {\n  /**\n   * General pattern options.\n   * @constant {object}\n   */\n  /* eslint-disable no-undef */\n  const PATTERN = {\n    gridX: 10,\n    gridY: 6,\n    overdraw: 60,\n    variance: 60,\n  };\n\n  /**\n   * Gradient animation colors.\n   * @constant {array}\n   */\n  const GRADIENT = [\n    new Color('#eeeeee'),\n    new Color('#cccccc'),\n  ];\n\n  /**\n   * Radius around the mouse curser that affect the triangle alpha value.\n   * @constant {number}\n   */\n  const MOUSE_RADIUS = 260;\n\n  /**\n   * The background color value.\n   * @constant {Color}\n   */\n  const BACKGROUND = new Color('#181818');\n\n  /**\n   * The reference size for the PaperJS canvas.\n   * @constant {Size}\n   */\n  const REFERENCE_SIZE = new Size(1920, 1080);\n\n  /* eslint-enable no-undef */\n\n  /**\n   * Linearly interpolates between two given colors.\n   * @param color1 {Color} - The first color.\n   * @param color2 {Color} - The second color.\n   * @param t {number} - The interpolation factor [0...1].\n   * @returns {Color} The resulting color.\n   */\n  function colorLerp(color1, color2, t) {\n    return color1 + (color2 - color1) * Math.min(Math.max(t, 0), 1);\n  }\n\n  /**\n   * Calculates the centroid of a triangle\n   * @param a {array} - The first point of the triangle [x, y].\n   * @param b {array} - The second point of the triangle [x, y].\n   * @param c {array} - The third point of the triangle [x, y].\n   * @returns {array} The point of the centroid.\n   */\n  function centroid(a, b, c) {\n    return [\n      (a[0] + b[0] + c[0]) / 3,\n      (a[1] + b[1] + c[1]) / 3,\n    ];\n  }\n\n  /**\n   * Generates the triangle points on the canvas.\n   * @param args {object} - Generation options.\n   * @returns {array} The generated points on the canvas.\n   */\n  function generatePoints(args = {}) {\n    const options = Object.assign({\n      gridX: 12,\n      gridY: 6,\n      overdraw: 32,\n      variance: 32,\n    }, args);\n\n    const stepX = (view.size.width + options.overdraw * 2) / options.gridX;\n    const stepY = (view.size.height + options.overdraw * 2) / options.gridY;\n\n    const points = [];\n\n    for (let y = 0; y <= options.gridY; y += 1) {\n      for (let x = 0; x <= options.gridX; x += 1) {\n        points.push([\n          (\n            (stepX * x)\n            - options.overdraw\n            + (Math.random() * options.variance * (Math.random() >= 0.5 ? 1 : -1))\n          ),\n          (\n            (stepY * y)\n            - options.overdraw\n            + (Math.random() * options.variance * (Math.random() >= 0.5 ? 1 : -1))\n          ),\n        ]);\n      }\n    }\n\n    return points;\n  }\n\n  /**\n   * Triangulates from points and draws the triangles on the canvas.\n   * Uses the Delaunay triangulate algorithm.\n   * @param points {array} - All the points on the canvas (must be a multiple of 3).\n   * @returns {array} The generated triangles on the canvas as 'Path' objects.\n   */\n  function drawTriangles(points) {\n    if (!points.length) { return []; }\n\n    // eslint-disable-next-line no-undef\n    const triangles = Delaunay.triangulate(points);\n    const shapes = Array(triangles.length / 3);\n\n    for (let i = 0; i < triangles.length; i += 3) {\n      const p1 = points[triangles[i]];\n      const p2 = points[triangles[i + 1]];\n      const p3 = points[triangles[i + 2]];\n\n      /* eslint-disable no-undef */\n      const triangle = new Path([\n        new Point(p1[0], p1[1]),\n        new Point(p2[0], p2[1]),\n        new Point(p3[0], p3[1]),\n      ]);\n      triangle.strokeWidth = 2;\n      triangle.strokeCap = 'round';\n      triangle.strokeJoin = 'round';\n      [triangle.strokeColor] = GRADIENT;\n      [triangle.fillColor] = GRADIENT;\n      triangle.closed = true;\n\n      shapes[i / 3] = {\n        triangle,\n        t: Math.random(),\n        step: Math.random() * 0.04 + 0.01,\n        sign: Math.random() <= 0.5,\n        alpha: 1,\n        alphaMulti: 1,\n      };\n    }\n\n    return shapes;\n  }\n\n  // Create background\n  // eslint-disable-next-line no-unused-vars\n  let background = new Shape.Rectangle({\n    point: [0, 0],\n    size: [view.size.width, view.size.height],\n    fillColor: BACKGROUND,\n  });\n\n  // Indicating if the mouse pointer has been moved\n  let pointerHasMoved = false;\n\n  // General options for the pattern generation\n  const options = { ...PATTERN };\n\n  // eslint-disable-next-line no-unused-vars\n  let points = generatePoints(options);\n  // eslint-disable-next-line no-unused-vars\n  let shapes = drawTriangles(points);\n\n  /**\n   * Gets called when the PaperJS view resizes.\n   */\n  // eslint-disable-next-line no-unused-vars\n  view.onResize = (event) => {\n    const sizeDiff = view.size / REFERENCE_SIZE;\n    const sizeAverage = (sizeDiff.width + sizeDiff.height) / 2;\n\n    options.gridX = Math.ceil(sizeDiff.width * PATTERN.gridX);\n    options.gridY = Math.ceil(sizeDiff.height * PATTERN.gridY);\n    options.variance = Math.ceil(PATTERN.variance / sizeAverage);\n    options.overdraw = Math.ceil(PATTERN.overdraw / sizeAverage);\n\n    project.activeLayer.removeChildren();\n    background = new Shape.Rectangle({\n      point: [0, 0],\n      size: [view.size.width, view.size.height],\n      fillColor: BACKGROUND,\n    });\n    points = generatePoints(options);\n    shapes = drawTriangles(points);\n  };\n\n  /**\n   * Gets called when the mouse pointer moves on the view.\n   */\n  view.onMouseMove = (event) => {\n    let currentShape;\n\n    for (let i = 0; i < shapes.length; i += 1) {\n      currentShape = shapes[i];\n\n      const center = centroid(\n        [currentShape.triangle.segments[0].point.x, currentShape.triangle.segments[0].point.y],\n        [currentShape.triangle.segments[1].point.x, currentShape.triangle.segments[1].point.y],\n        [currentShape.triangle.segments[2].point.x, currentShape.triangle.segments[2].point.y],\n      );\n      const distance = event.point.getDistance(new Point(center));\n\n      currentShape.alpha = Math.min(distance / MOUSE_RADIUS, 1);\n      /* currentShape.alpha = Math.max(\n        currentShape.alpha - (0.1 + (0.9 * (1 - (currentShape.alpha ** 2)))),\n        Math.min(distance / MOUSE_RADIUS, 1),\n      ); */\n    }\n\n    pointerHasMoved = true;\n  };\n\n  /**\n   * Gets called for every animation frame of PaperJS.\n   */\n  view.onFrame = (event) => {\n    const dt = event.delta;\n    let currentShape;\n    let v;\n\n    for (let i = 0; i < shapes.length; i += 1) {\n      currentShape = shapes[i];\n      v = currentShape.t;\n\n      // Color lerp animation\n      if (currentShape.sign) {\n        v += dt * currentShape.step;\n\n        if (v >= 1) {\n          v = 1 - (v - 1);\n          currentShape.t = 1;\n          currentShape.sign = false;\n        } else {\n          currentShape.t = v;\n        }\n      } else {\n        v -= dt * currentShape.step;\n\n        if (v <= 0) {\n          v = -v;\n          currentShape.t = 0;\n          currentShape.sign = true;\n        } else {\n          currentShape.t = v;\n        }\n      }\n\n\n      if (pointerHasMoved) {\n        currentShape.alphaMulti = Math.max(currentShape.alphaMulti - dt * 0.5, 0);\n      } else {\n        currentShape.alphaMulti = Math.min(currentShape.alphaMulti + dt * 0.5, 1);\n      }\n\n      // Assign newly generated properties\n      currentShape.triangle.fillColor = colorLerp(GRADIENT[0], GRADIENT[1], v);\n      currentShape.triangle.fillColor.alpha = currentShape.alpha\n        + (1 - currentShape.alpha) * currentShape.alphaMulti;\n    }\n\n    pointerHasMoved = false;\n  };\n}());\n"]}